{"version":3,"sources":["webpack:///./src/components/games/MentalArithmetic.vue?32a7","webpack:///src/components/games/MentalArithmetic.vue","webpack:///./src/components/games/MentalArithmetic.vue?bd6e","webpack:///./src/components/games/MentalArithmetic.vue","webpack:///./src/util/timeFormat.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","questions","currentIndex","currentInput","on","onInput","onDelete","Refresh","model","value","callback","$$v","showScore","expression","staticClass","staticStyle","_v","_s","score","scoreEn","staticRenderFns","component","timeFormatCn","time","timeFormat","timeFormatEn","h","m","s","result","hours","Math","floor","leave2","minutes","leave3","seconds","round"],"mappings":"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","file":"js/chunk-25c2a30d.aa29a25d.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('Start'),_c('MentalArithmeticLine',{attrs:{\"question\":_vm.questions[_vm.currentIndex - 2]}}),_c('MentalArithmeticLine',{attrs:{\"question\":_vm.questions[_vm.currentIndex - 1]}}),_c('MentalArithmeticLine',{attrs:{\"question\":_vm.questions[_vm.currentIndex],\"answer\":_vm.currentInput}}),_c('MentalArithmeticLine',{attrs:{\"question\":_vm.questions[_vm.currentIndex + 1],\"answer\":''}}),_c('van-number-keyboard',{attrs:{\"extra-key\":\" \",\"hide-on-click-outside\":false,\"show\":true,\"v-model\":_vm.currentInput},on:{\"input\":_vm.onInput,\"delete\":_vm.onDelete}}),_c('van-popup',{attrs:{\"safe-area-inset-bottom\":\"\",\"duration\":\"0\",\"close-on-click-overlay\":false,\"closeable\":true,\"position\":\"bottom\"},on:{\"closed\":_vm.Refresh},model:{value:(_vm.showScore),callback:function ($$v) {_vm.showScore=$$v},expression:\"showScore\"}},[_c('pre',{staticClass:\"game_formula\",staticStyle:{\"font-size\":\"30px\"}},[_vm._v(_vm._s(_vm.score))]),_c('pre',{staticClass:\"game_formula\",staticStyle:{\"margin-top\":\"0\",\"font-size\":\"20px\"}},[_vm._v(_vm._s(_vm.scoreEn))])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <!-- 倒计时 -->\n    <Start></Start>\n\n    <!-- 算式 -->\n    <MentalArithmeticLine :question=\"questions[currentIndex - 2]\"></MentalArithmeticLine>\n    <MentalArithmeticLine :question=\"questions[currentIndex - 1]\"></MentalArithmeticLine>\n    <MentalArithmeticLine :question=\"questions[currentIndex]\" :answer=\"currentInput\"></MentalArithmeticLine>\n    <MentalArithmeticLine :question=\"questions[currentIndex + 1]\" :answer=\"''\"></MentalArithmeticLine>\n\n    <!-- 键盘式按键 -->\n    <van-number-keyboard extra-key=\" \"\n        :hide-on-click-outside=\"false\" :show=\"true\" :v-model=\"currentInput\"\n        @input=\"onInput\" @delete=\"onDelete\"/>\n\n    <!-- 结果-->\n    <van-popup safe-area-inset-bottom\n               duration=\"0\" :close-on-click-overlay=\"false\" :closeable=\"true\" @closed=\"Refresh\"\n               v-model=\"showScore\" position=\"bottom\">\n      <pre class=\"game_formula\" style=\"font-size: 30px;\">{{score}}</pre>\n      <pre class=\"game_formula\" style=\"margin-top: 0;font-size: 20px;\">{{scoreEn}}</pre>\n    </van-popup>\n\n  </div>\n</template>\n\n<script>\n  const Start = () => import('@/components/Start.vue')\n  const MentalArithmeticLine = () => import('@/components/games/MentalArithmeticLine.vue')\n\n  import {timeFormatCn, timeFormatEn} from \"@/util/timeFormat\"\n\n  import MtaH5 from 'mta-h5-analysis';\n\n  export default {\n    components: {\n      Start,\n      MentalArithmeticLine,\n    },\n\n    data() {\n      return {\n        startTime: new Date().getTime(),\n        showScore: false,\n        score: '',\n        scoreEn: '',\n        questions: [],\n        currentIndex: 0,\n        currentInput: '_',\n        n: this.intParam(\"n\", 25),\n        a1: this.intParam(\"a1\", 0),\n        a2: this.intParam(\"a2\", 10),\n        b1: this.intParam(\"b1\", 0),\n        b2: this.intParam(\"b2\", 10),\n        f1: this.intParam(\"f1\", 0),\n        f2: this.intParam(\"f2\", 3),\n      };\n    },\n\n    created() {\n      let aLen = this.a2 - this.a1 + 1;\n      let bLen = this.b2 - this.b1 + 1;\n      let fLen = this.f2 - this.f1 + 1;\n      for (let i = 0; i < this.n; i++) {\n        let a = this.a1 + Math.floor(Math.random() * aLen);\n        let b = this.b1 + Math.floor(Math.random() * bLen);\n        let f = this.f1 + Math.floor(Math.random() * fLen);\n        // 指定数时能有交换\n        if (f !== 4 && Math.floor(Math.random() * 2) === 1) {\n            let t = a;\n            a = b;\n            b = t;\n        }\n        switch (f) {\n          case 0:\n            this.questions.push({m: a, f: '+', n: b, a: a + b, ma: ''});\n            break;\n          case 1:\n            this.questions.push({m: a + b, f: '-', n: b, a: a, ma: ''});\n            break;\n          case 2:\n            this.questions.push({m: a, f: '×', n: b, a: a * b, ma: ''});\n            break;\n          case 3:\n            this.questions.push({m: a * b, f: '÷', n: b, a: a, ma: ''});\n            break;\n          case 4:\n            this.questions.push({m: a, f: '^', n: b, a: Math.pow(a,b), ma: ''});\n            break;\n        }\n      }\n    },\n\n    mounted() {\n      let _this = this;\n      document.onkeydown = function (e) {\n        let key = e.key;\n        if (key >= 0 && key <= 9) {\n          _this.onInput(key);\n        } else {\n          _this.onDelete();\n        }\n      };\n    },\n\n    methods: {\n\n      onInput(value) {\n        if (this.currentInput === '_') {\n          this.currentInput = '' + value;\n        } else {\n          this.currentInput = '' + this.currentInput + value;\n        }\n        let currentQuestion = this.questions[this.currentIndex];\n        if (currentQuestion.a === 1 * this.currentInput) {\n          currentQuestion.ma = this.currentInput;\n          this.currentIndex++;\n          if (this.currentIndex === this.n) {\n            // 减去倒计时的 3 秒\n            let time = new Date().getTime() - this.startTime - 3000;\n            let timeCn = timeFormatCn(time);\n\n            let operator = ''\n            for (let f = this.f1; f <= this.f2; f++) {\n              switch (f) {\n                case 0:\n                  operator += '+';\n                  break;\n                case 1:\n                  operator += '-';\n                  break;\n                case 2:\n                  operator += '×';\n                  break;\n                case 3:\n                  operator += '÷';\n                  break;\n                case 4:\n                  operator += '^';\n                  break;\n              }\n            }\n            this.score = this.n + ' 道计算题\\n耗时 ' + timeCn;\n            this.scoreEn = this.a1 + ' ~ ' + this.a2 + ' ' + operator + ' ' + this.b1 + ' ~ ' + this.b2 +\n                '\\n\\n' + this.n + ' calculation questions\\ntakes ' + timeFormatEn(time);\n            this.showScore = true;\n            MtaH5.clickStat('MentalArithmeticScore', {\n              'n': this.n,\n              'time': time,\n              'timecn': timeCn,\n              'a1': this.a1,\n              'a2': this.a2,\n              'b1': this.b1,\n              'b2': this.b2,\n              'f1': this.f1,\n              'f2': this.f2,\n              'operator': operator,\n            })\n            return;\n          }\n          this.currentInput = '_';\n        }\n      },\n\n      onDelete() {\n        this.currentInput = this.currentInput.substr(0, this.currentInput.length - 1)\n        if (this.currentInput.length === 0) {\n          this.currentInput = '_';\n        }\n      },\n\n      Refresh() {\n        this.$router.replace('/Refresh');\n      },\n    },\n  };\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MentalArithmetic.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MentalArithmetic.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MentalArithmetic.vue?vue&type=template&id=6cbf07fe&\"\nimport script from \"./MentalArithmetic.vue?vue&type=script&lang=js&\"\nexport * from \"./MentalArithmetic.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/**\n * 只有秒时显示秒，有分时显示分，最多显示时分秒\n */\nexport function timeFormatCn(time) {\n  return timeFormat(time, ' 时 ', ' 分 ', ' 秒')\n}\nexport function timeFormatEn(time) {\n  return timeFormat(time, ' hour ', ' minute ', ' second')\n}\nexport function timeFormat(time, h, m, s) {\n  let result;\n  let hours = Math.floor(time / (3600 * 1000));\n  let leave2 = time % (3600 * 1000);\n  let minutes = Math.floor(leave2 / (60 * 1000));\n  let leave3 = leave2 % (60 * 1000);\n  let seconds = Math.round(leave3 / 1000);\n  result = seconds + s;\n  if (minutes > 0) {\n    result = minutes + m + result;\n  }\n  if (hours > 0) {\n    result = hours + h + result;\n  }\n  return result;\n}"],"sourceRoot":""}